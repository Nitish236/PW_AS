{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-24T09:39:02.074Z",
    "end": "2023-09-24T09:39:03.902Z",
    "duration": 1828,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5865656d-0df9-41e5-bad4-8bd0994fc36c",
      "title": "",
      "fullFile": "C:\\Users\\Asus\\Desktop\\PW_AS\\test\\project.test.js",
      "file": "\\test\\project.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
          "title": "API Tests",
          "fullFile": "C:\\Users\\Asus\\Desktop\\PW_AS\\test\\project.test.js",
          "file": "\\test\\project.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Log In as Nitish(user)",
              "fullTitle": "API Tests Log In as Nitish(user)",
              "timedOut": false,
              "duration": 1302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//  Logging In\nconst response = await request(app).post(\"/api/login\").send({\n  username: \"Nitish\",\n  password: \"nitish123\",\n});\n// Assertions\nexpect(response.status).to.equal(200);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\"Login Successfull\");\nexpect(response.body.user).to.not.be.undefined;\nexpect(response.body.user.name).to.equal(\"Nitish\");\nexpect(response.body.user.role).to.equal(\"user\");\nexpect(response.body.token).to.not.be.undefined;\n// Store the access token\naccessToken = response.body.token;",
              "err": {},
              "uuid": "a772beeb-24ce-4a69-814a-e872441902af",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create a record",
              "fullTitle": "API Tests Create a record",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const recordData = {\n  name: \"Nitish verma\",\n  salary: \"190000\",\n  currency: \"USD\",\n  department: \"Engineering\",\n  sub_department: \"Platform\",\n};\n// Creating new Record\nconst response = await request(app)\n  .post(\"/api/records/create\")\n  .set(\"Cookie\", `accessToken=${accessToken}`)\n  .send(recordData);\n// Assertions\nexpect(response.status).to.equal(201);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\"Record created successfully\");\nexpect(response.body.record).to.not.be.undefined;\n// Store new record id\nrecordId = response.body.record._id;",
              "err": {},
              "uuid": "0b580b77-30ef-4728-81e3-fad2e77a01ed",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a record",
              "fullTitle": "API Tests Delete a record",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deleting the newly created record\nconst response = await request(app)\n  .delete(`/api/records/delete/${recordId}`)\n  .set(\"Cookie\", `accessToken=${accessToken}`);\n// Assertions\nexpect(response.status).to.equal(202);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\"Record deleted successfully\");\nexpect(response.body.record).to.not.be.undefined;\nexpect(response.body.record._id).to.equal(recordId);\n// Remove the recordId\nrecordId = undefined;",
              "err": {},
              "uuid": "07fe638b-377d-4af1-915a-ae6d56ca29cb",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get SS for all dataset if currency is specified as 'USD'",
              "fullTitle": "API Tests Get SS for all dataset if currency is specified as 'USD'",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Getting SS\nconst response = await request(app)\n  .post(\"/api/records/ss/all\")\n  .set(\"Cookie\", `accessToken=${accessToken}`)\n  .send({\n    currency: \"USD\",\n  });\n// Assertions\nexpect(response.status).to.equal(200);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\n  \"Summary Statistics on salary for all dataset\"\n);\nexpect(response.body.ss).to.not.be.undefined;\nexpect(response.body.ss.mean).to.not.be.undefined;\nexpect(response.body.ss.min).to.not.be.undefined;\nexpect(response.body.ss.max).to.not.be.undefined;",
              "err": {},
              "uuid": "a5fca320-62a5-4737-a828-01062f9a0b14",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get SS for all dataset if currency is not specified",
              "fullTitle": "API Tests Get SS for all dataset if currency is not specified",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Getting SS\nconst response = await request(app)\n  .post(\"/api/records/ss/all\")\n  .set(\"Cookie\", `accessToken=${accessToken}`);\n// Assertions\nexpect(response.status).to.equal(200);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\n  \"Summary Statistics on salary for all dataset\"\n);\nexpect(response.body.ss).to.not.be.undefined;\nexpect(response.body.ss.mean).to.not.be.undefined;\nexpect(response.body.ss.min).to.not.be.undefined;\nexpect(response.body.ss.max).to.not.be.undefined;",
              "err": {},
              "uuid": "4b54199e-8d88-4d55-bcdc-444f6b78a8b5",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get SS for all dataset for contract one's (contract: true)",
              "fullTitle": "API Tests Get SS for all dataset for contract one's (contract: true)",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Getting SS\nconst response = await request(app)\n  .get(\"/api/records/ss/onCon\")\n  .set(\"Cookie\", `accessToken=${accessToken}`);\n// Assertions\nexpect(response.status).to.equal(200);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\n  \"Summary Statistics on salary which are on contract\"\n);\nexpect(response.body.ss).to.not.be.undefined;\nexpect(response.body.ss.mean).to.not.be.undefined;\nexpect(response.body.ss.min).to.not.be.undefined;\nexpect(response.body.ss.max).to.not.be.undefined;",
              "err": {},
              "uuid": "865944f3-be4e-4c38-beaf-5b2c4ab0489c",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get SS for each unique department",
              "fullTitle": "API Tests Get SS for each unique department",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Getting SS\nconst response = await request(app)\n  .get(\"/api/records/ss/dep\")\n  .set(\"Cookie\", `accessToken=${accessToken}`);\n// Assertions\nexpect(response.status).to.equal(200);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\n  \"Summary Statistics on salary for each department\"\n);\nexpect(response.body.ss).to.not.be.undefined;",
              "err": {},
              "uuid": "db71f61c-7d7d-4b02-819b-9b66a6bd0f02",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get SS for each department and sub department combination",
              "fullTitle": "API Tests Get SS for each department and sub department combination",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Getting SS\nconst response = await request(app)\n  .get(\"/api/records/ss/dep/sub\")\n  .set(\"Cookie\", `accessToken=${accessToken}`);\n// Assertions\nexpect(response.status).to.equal(200);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\n  \"Summary Statistics on salary for each department and sub department combination\"\n);\nexpect(response.body.ss).to.not.be.undefined;",
              "err": {},
              "uuid": "5e1bc78a-e222-4fed-b7ad-308bf60a59eb",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Log Out as Nitish(user)",
              "fullTitle": "API Tests Log Out as Nitish(user)",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Logging out\nconst response = await request(app)\n  .post(\"/api/logout\")\n  .set(\"Cookie\", `accessToken=${accessToken}`);\n// Assertions\nexpect(response.status).to.equal(200);\nexpect(response.body.success).to.equal(true);\nexpect(response.body.msg).to.equal(\"LogOut Successfull\");\n// Remove the access Token\naccessToken = undefined;",
              "err": {},
              "uuid": "db604af6-112e-4ddf-b7ad-ffd744c4e209",
              "parentUUID": "ad7a3be7-67b4-4221-99e4-466aeb642b8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a772beeb-24ce-4a69-814a-e872441902af",
            "0b580b77-30ef-4728-81e3-fad2e77a01ed",
            "07fe638b-377d-4af1-915a-ae6d56ca29cb",
            "a5fca320-62a5-4737-a828-01062f9a0b14",
            "4b54199e-8d88-4d55-bcdc-444f6b78a8b5",
            "865944f3-be4e-4c38-beaf-5b2c4ab0489c",
            "db71f61c-7d7d-4b02-819b-9b66a6bd0f02",
            "5e1bc78a-e222-4fed-b7ad-308bf60a59eb",
            "db604af6-112e-4ddf-b7ad-ffd744c4e209"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1797,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}